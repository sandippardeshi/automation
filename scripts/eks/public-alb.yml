apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: <provide name here>
    #  namespace: kube-system
  labels:
    app: <provide project name here>-app
  annotations:
    #kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/success-codes: '200'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'
    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-east-1:737403269845:certificate/78ac091f-ac02-448f-bafd-9e31eb262589
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS":443}]'
    alb.ingress.kubernetes.io/actions.ssl-redirect: '{"Type": "redirect", "RedirectConfig": { "Protocol": "HTTPS", "Port": "443", "StatusCode": "HTTP_301"}}'
spec:
  ingressClassName: alb
  rules:
    - http:
        paths:
          - path: /<provide service1 path here>
            pathType: Prefix
            backend:
              service:
                name: <provide service1 name here>-nodeport-service
                port:
                  number: <provide port here>
          - path: /<provide service2 path here>
            pathType: Prefix
            backend:
              service:
                name: <provide service2 name here>-nodeport-service
                port:
                  number: <provide port here>
          - path: /<provide service3 path here>
            pathType: Prefix
            backend:
              service:
                name: <provide service3 name here>-nodeport-service
                port:
                  number: <provide port here>
          
